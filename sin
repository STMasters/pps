#include <math.h>
#include "stm32f10x.h"
 
volatile uint32_t timer_ms = 0;
 
void SysTick_Handler()
{
	if (timer_ms)
		timer_ms--;
}
 
void delay_ms(int time)
{
	timer_ms = time;
	while (timer_ms);
}
 
float calc_pwm(float val)
{
	const float k = 0.1f;
	const float x0 = 60.0f;
	return 300.0f / (1.0f + exp(-k * (val - x0)));
}
 
int main(void)
{
	int counter = 0;
	GPIO_InitTypeDef gpio;
	TIM_TimeBaseInitTypeDef tim;
	TIM_OCInitTypeDef  channel;
	NVIC_InitTypeDef nvic;
 
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 
	GPIO_StructInit(&gpio);
	gpio.GPIO_Pin = GPIO_Pin_5;
	gpio.GPIO_Speed = GPIO_Speed_2MHz;
	gpio.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOA, &gpio);
 
	gpio.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_8;
	gpio.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOB, &gpio);
 
	TIM_TimeBaseStructInit(&tim);
	tim.TIM_CounterMode = TIM_CounterMode_Up;
	tim.TIM_Prescaler = 64 - 1;
	tim.TIM_Period = 1000 - 1;
	TIM_TimeBaseInit(TIM4, &tim);
 
	TIM_OCStructInit(&channel);
	channel.TIM_OCMode = TIM_OCMode_PWM2;
	channel.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OC1Init(TIM4, &channel);
	TIM_OC2Init(TIM4, &channel);
	TIM_OC3Init(TIM4, &channel);
 
	TIM_Cmd(TIM4, ENABLE);
 
	nvic.NVIC_IRQChannel = TIM4_IRQn;
	nvic.NVIC_IRQChannelPreemptionPriority = 0;
	nvic.NVIC_IRQChannelSubPriority = 0;
	nvic.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&nvic);
 
	SysTick_Config(SystemCoreClock / 1000);
 
	while (1) {
		float r = 50 * (1.0f + sin(counter / 100.0f));
		float g = 50 * (1.0f + sin(1.5f * counter / 100.0f));
		float b = 50 * (1.0f + sin(2.0f * counter / 100.0f));
		TIM_SetCompare1(TIM4, calc_pwm(b));
		TIM_SetCompare2(TIM4, calc_pwm(g));
		TIM_SetCompare3(TIM4, calc_pwm(r));
		delay_ms(20);
		counter++;
	}
}
